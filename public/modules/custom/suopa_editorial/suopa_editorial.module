<?php

/**
 * @file
 * Contains suopa_editorial.module.
 */

use Drupal\views\ViewExecutable;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * {@inheritdoc}
 */
function suopa_editorial_form_alter(&$form, $form_state) {
  suopa_editorial_modify_article_publishing_info($form, $form_state);
  suopa_editorial_enable_drag_and_drop($form, $form_state);
  suopa_editorial_disable_sibling_checkbox($form, $form_state);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Alter the datetime_default widget.
 */
function suopa_editorial_field_widget_datetime_timestamp_form_alter(
  &$element,
  FormStateInterface $form_state,
  $context) {

  /** @var \Drupal\Core\Field\WidgetInterface $widget */
  $widget = $context['widget'];
  // Fetch settings by the timepicker module.
  $settings = $widget->getThirdPartySettings('timepicker');

  if (!empty($settings['enabled'])) {
    $library_info = timepicker_get_library($settings['type']);

    // Attach callback library.
    $callback_library = $library_info['callback library'];
    $callback_library_name = str_replace('-', '_', $callback_library['name']);
    $element['#attached']['library'][] =
      "{$callback_library['extension']}/{$callback_library['name']}";

    // Attach js settings.
    /** @var \Drupal\Core\Field\FieldItemListInterface $items */
    $items = $context['items'];
    $field_name = $items->getName();
    $js_options = [];
    $js_options_value = $settings['js_options']['value'];

    if (!empty($js_options_value)) {
      $js_options_values = explode("\n", $js_options_value);
      foreach ($js_options_values as $value) {
        $data = explode(':', $value);
        $js_options[Xss::filter(trim($data[0]))] = Xss::filter(trim($data[1]));
      }
    }

    $element['#attached']['drupalSettings'][$callback_library['extension']][$callback_library_name][$field_name] = $js_options;
  }
}

/**
 * Modify publishing options in article node forms.
 *
 * Mainly move the publishing info fields to the left sidebar.
 *
 * @param array $form
 *   Form.
 * @param array $form_state
 *   Form state.
 */
function suopa_editorial_modify_article_publishing_info(&$form, $form_state) {
  $allowedIds = ['node_article_edit_form', 'node_article_form', 'node_core_content_edit_form', 'node_core_content_form'];

  if (!in_array($form['#form_id'], $allowedIds)) {
    return;
  }

  $form['field_displayed_update_time']['#group'] = 'revision_information';
  $form['field_displayed_author']['#group'] = 'revision_information';

  // Attach blog tag list toggler to article forms.
  $form['#attached']['library'][] = 'suopa_editorial/blog-tag-list-hidden';
}

/**
 * Disable submit button from landing page and article
 * when paragraphs drag and drop is being used.
 *
 * @param array $form
 *   Form.
 * @param array $form_state
 *   Form state.
 */
function suopa_editorial_enable_drag_and_drop(&$form, $form_state) {
  $allowedIds = [
    'node_article_edit_form',
    'node_article_form',
    'node_landing_page_edit_form',
    'node_landing_page_form',
  ];

  if (!in_array($form['#form_id'], $allowedIds)) {
    return;
  }

  $form['#attached']['library'][] = 'suopa_editorial/paragraph-drag-n-drop';
}

/**
 * Disable sibling checkbox if the current has been clicked.
 *
 * @param array $form
 *   Form.
 * @param array $form_state
 *   Form state.
 */
function suopa_editorial_disable_sibling_checkbox(&$form, $form_state) {
  $allowedIds = [
    'node_article_edit_form',
    'node_article_form',
    'node_landing_page_edit_form',
    'node_landing_page_form',
    'taxonomy_term_theme_form',
  ];

  if (!in_array($form['#form_id'], $allowedIds)) {
    return;
  }

  $form['#attached']['library'][] = 'suopa_editorial/disable-sibling-checkbox';
}

/**
 * Implements hook_views_pre_render().
 *
 * Modify media entity browser image width to suit smaller screens.
 *
 * {@inheritDoc}
 */
function suopa_editorial_views_pre_render(ViewExecutable $view) {
  if (isset($view) && $view->id() === 'media_entity_browser') {
    $view->element['#attached']['library'][] = 'suopa_editorial/media-entity-browser';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add custom classes to input__checkbox.
 */
function suopa_editorial_preprocess_input__checkbox(&$variables) {
  if (!isset($variables['element']['#parents'])) {
    return;
  }

  $fields = [
    'field_p_small_image',
    'field_p_content_50_50',
  ];

  foreach ($fields as $field) {
    if (in_array($field, $variables['element']['#parents'], TRUE)) {
      $variables['attributes']['class'][] = 'is-disableable';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add custom classes to container.
 */
function suopa_editorial_preprocess_container(&$variables) {
  if (!isset($variables['element']['#parents'])) {
    return;
  }

  $fields = [
    'field--name-field-p-small-image',
    'field--name-field-p-content-50-50',
  ];

  foreach ($fields as $field) {
    if (
      isset($variables['attributes']['class']) &&
      is_array($variables['attributes']['class']) &&
      in_array($field, $variables['attributes']['class'])
    ) {
      $variables['attributes']['class'] = 'is-disableable--wrapper';
    }
  }
}
