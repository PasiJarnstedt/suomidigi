<?php

/**
 * @file
 * Contains suopa_group.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_help().
 */
function suopa_group_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the suopa_group module.
    case 'help.page.suopa_group':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Hosts all group related custom code.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_create().
 */
function suopa_group_entity_create(EntityInterface $entity) {
  if ($entity->getEntityType()->id() !== 'group') {
    return;
  }

  // Set predefined paragraphs for new group.
  $articles = Paragraph::create([
    'type' => 'group_view',
    'field_p_title' => [
      'value' => t('Articles'),
    ],
    'field_p_description_html' => [
      'value' => t('Articles published by the group.'),
    ],
    'field_p_view' => [
      'target_id' => 'group_content',
      'display_id' => 'articles',
    ],
  ]);
  $articles->save();

  $events = Paragraph::create([
    'type' => 'group_view',
    'field_p_title' => [
      'value' => t('Upcoming events'),
    ],
    'field_p_description_html' => [
      'value' => t('Events published by the group that are open to everyone to participate.'),
    ],
    'field_p_view' => [
      'target_id' => 'group_content',
      'display_id' => 'events',
    ],
  ]);
  $events->save();

  $members = Paragraph::create([
    'type' => 'group_view',
    'field_p_title' => [
      'value' => t('Involved in the development'),
    ],
    'field_p_view' => [
      'target_id' => 'group_members_list',
      'display_id' => 'members',
    ],
  ]);
  $members->save();

  // Set the predefined paragraphs to the group entity.
  $entity->field_group_lists = [
    [
      'target_id' => $articles->id(),
      'target_revision_id' => $articles->getRevisionId(),
    ],
    [
      'target_id' => $events->id(),
      'target_revision_id' => $events->getRevisionId(),
    ],
    [
      'target_id' => $members->id(),
      'target_revision_id' => $members->getRevisionId(),
    ],
  ];

  return $entity;
}

/**
 * Implements hook_group_content_insert().
 */
function suopa_group_group_content_insert($entity) {
  // Handle only users.
  if ($entity->getGroupContentType()->id() !== 'group-group_membership') {
    return;
  }

  // Add "Group member" role to the current user.
  $user = $entity->getEntity();
  if (!in_array('group_member', $user->getRoles())) {
    $user->addRole('group_member');
    $user->save();
  }
}

/**
 * Implements hook_group_content_delete().
 */
function suopa_group_group_content_delete($entity) {
  if ($entity->getGroupContentType()->id() !== 'group-group_membership') {
    return;
  }

  // Remove "Group member" role from the current user.
  if ($entity->getEntity()->getEntityTypeId() == 'user') {
    $user = $entity->getEntity();

    $group_membership_service = \Drupal::service('group.membership_loader');
    $groups = $group_membership_service->loadByUser($user);

    if (empty(count($groups))) {
      if (in_array('group_member', $user->getRoles())) {
        $user->removeRole('group_member');
        $user->save();
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function suopa_group_form_group_form_alter(&$form, &$form_state, $form_id) {
  // Prevent access to path field and set automatic url alias always.
  $form['path']['#access'] = FALSE;
  $form_state->setValue('path', [['pathauto' => 1]]);
}
