<?php

/**
 * @file
 * Functions to support theming in the Suomidigi theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\media\Entity\Media;
use Drupal\suopa_communities\Entity\Community;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_preprocess().
 */
function suomidigi_preprocess(&$variables) {
  $variables['icons_path'] = suomidigi_get_icons_path();
  $variables['current_language'] = Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();
  $variables['#attached']['drupalSettings']['iconsPath'] = $variables['icons_path'];
}

/**
 * Implements hook_preprocess_html() for HTML document templates.
 *
 * Create path to default theme for mobile icons (favicon, apple touch icon,
 * Android icons, ... defined in html tpl.
 *
 * {@inheritdoc}
 */
function suomidigi_preprocess_html(&$variables) {
  $variables['theme_path'] = file_create_url(drupal_get_path('theme', 'suomidigi'));
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Set site slogan and site name as variables for javascript templates.
 */
function suomidigi_preprocess_page(&$variables) {
  $site_config = Drupal::config('system.site');
  $settings = [
    'siteSlogan' => $site_config->get('slogan'),
    'siteName' => $site_config->get('name'),
  ];
  $variables['#attached']['drupalSettings'] = $settings;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_node(&$variables) {
  if (
    $variables['node']->getType() === 'article' ||
    $variables['node']->getType() === 'legislation_collection_page'
  ) {
    $node = $variables['node'];
    $published_at = $node->get('published_at')->getString();

    if (isset($published_at) && $node->isPublished()) {
      $variables['published_at'] = $published_at;
    }

    if ($node->hasField('field_header_image')) {
      $mediaEntity = $node->get('field_header_image')->getValue();

      if (!empty($mediaEntity)) {
        $field_media = Media::load($mediaEntity[0]['target_id']);
        $mediaImage = $field_media->get('field_media_image')->first();

        if (!empty($mediaImage)) {
          /** @var \Drupal\Core\Entity\Plugin\DataType\EntityReference $entity */
          $entity = $mediaImage->get('entity');
          $target = $entity->getTarget();
          if ($target) {
            /** @var \Drupal\Core\Field\FieldItemList $uri */
            $uri = $target->get('uri');
            $image_uri = $uri->first()->getValue();

            if (is_array($image_uri) && array_key_exists('value', $image_uri)) {
              $variables['big_liftup_teaser_image'] = $image_uri['value'];
              $variables['is_full_width'] = drupal_static(
                'article_full_width_' . $node->id(),
                FALSE
              );
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * {@inheritdoc}
 */
function suomidigi_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  switch ($paragraph->getType()) {
    case 'liftup_entity_reference_item':
      if ($paragraph->hasField('field_p_full_width')) {
        $fullWidthValue = (int) $paragraph->get('field_p_full_width')->getValue()[0]['value'];
        $fullWidth = $fullWidthValue === 1 ? TRUE : FALSE;
        $variables['is_full_width'] = $fullWidth;
      }

      if ($paragraph->hasField('field_p_entity_reference')) {
        $targetID = $paragraph->get('field_p_entity_reference')->getValue()[0]['target_id'];
        $is_full_width = &drupal_static('article_full_width_' . $targetID, FALSE);

        if (isset($fullWidth) && $fullWidth) {
          $is_full_width = TRUE;
        }
      }
      break;

    case 'legislation_attachment':
      if ($paragraph->hasField('field_legislation_attachment')) {
        /** @var \Drupal\file\Entity\File $file */
        $file = $paragraph->get('field_legislation_attachment')->entity;
        $path = $file->getFileUri();

        if ($path) {
          $variables['file_extension'] = pathinfo($path, PATHINFO_EXTENSION);
          $variables['file_size'] = format_size($file->getSize());
          $variables['file_url'] = $path;
        }
      }

      if ($paragraph->hasField('field_legislation_colour')) {
        $variables['legislation_colour'] = $paragraph->get('field_legislation_colour')->value;
      }

      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_page_title(&$variables) {
  // Modify title classes for Theme taxonomy terms.
  $term = Drupal::request()->attributes->get('taxonomy_term');
  if (!empty($term) && $term->bundle() == 'theme') {
    $variables['page_title_alternative'] = TRUE;
  }

  // Modify title classes for Legislation collection page nodes.
  $node = Drupal::request()->attributes->get('node');
  if (!empty($node) && $node->bundle() == 'legislation_collection_page') {
    $variables['page_title_secondary'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id'])) {
    $variables['content']['#attributes']['block_id'] = $variables['elements']['#id'];
  }

  if ($variables['plugin_id'] == 'page_title_block') {
    $term = Drupal::request()->attributes->get('taxonomy_term');
    if (!empty($term) && $term->bundle() == 'theme') {
      if ($term->hasField('field_liftup_image') && !$term->get('field_liftup_image')->isEmpty()) {
        $media_id = $term->get('field_liftup_image')->first()->getValue()['target_id'];
        $media = Media::load($media_id);
        $build = Drupal::entityTypeManager()->getViewBuilder('media')->view($media, 'theme_teaser_liftup');
        $variables['content']['field_liftup_image'] = $build;
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function suomidigi_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    $suggestions[] = 'block__' . $variables['elements']['content']['#block_content']->bundle();
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function suomidigi_preprocess_menu(&$variables) {
  if (
    isset($variables['attributes']['block_id']) &&
    $variables['attributes']['block_id'] == 'menu_sidebar'
  ) {

    // Remove obsolete menu items from sidebar.
    foreach ($variables['items'] as $key => $item) {
      if (!$item['in_active_trail']) {
        unset($variables['items'][$key]);
      }
    }
  }
}

/**
 * Helper function to get the icons path.
 *
 * @return string|null
 *   Returns path for the Telia icons SVG or null.
 */
function suomidigi_get_icons_path() {
  static $icon_path;
  if (!isset($icon_path)) {
    global $base_url;
    $icon_path = $base_url . '/' . drupal_get_path('theme', 'suomidigi') . '/icons/icons.svg';

    if (!empty($icon_path)) {
      // Add icons path as a global variable.
      return $icon_path;
    }
  }
  return $icon_path;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Provide block based menu suggestions.
 */
function suomidigi_theme_suggestions_menu_alter(&$suggestions, $variables) {
  if (isset($variables['attributes']['block_id'])) {
    switch ($variables['attributes']['block_id']) {
      case 'menu_desktop':
        $suggestions[] = 'menu__desktop';
        break;

      case 'menu_mobile':
        $suggestions[] = 'menu__mobile';
        break;

      case 'menu_sidebar':
        $suggestions[] = 'menu__sidebar';
        break;

      default:
        $suggestions[] = 'menu__' . $variables['attributes']['block_id'];
        break;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Create custom theme suggestions for taxonomy term teaser.
 *
 * {@inheritdoc}
 */
function suomidigi_theme_suggestions_taxonomy_term_alter(&$suggestions, $variables) {
  $element = $variables['elements'];

  if ($element['#view_mode'] !== 'teaser') {
    return;
  }

  $suggestions[] = 'taxonomy_term__' . $element['#taxonomy_term']->bundle() . '__' . $element['#view_mode'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_taxonomy_term(&$variables) {
  $element = $variables['elements'];

  if ($element['#taxonomy_term']->bundle() == 'theme') {
    $current_path = Drupal::service('path.current')->getPath();
    $result = Drupal::service('path.alias_manager')->getAliasByPath($current_path);

    if ($variables['url'] == $result) {
      $variables['term_url_is_active'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Make article images full width when viewing them in taxonomy term lists.
 */
function suomidigi_preprocess_views_view(&$variables) {
  $view = $variables['view'];

  if ($view->id() == 'taxonomy_term' && $view->current_display == 'page_1') {
    $variables['attributes']['class'][] = 'theme-term__list';
    $row_style_plugin = &$variables['rows'][0]['#view']->style_plugin;
    $row_style_plugin->options['row_class'] = 'theme-term__list-item';
    foreach ($view->result as $result) {
      if (isset($result->nid)) {
        $is_full_width = &drupal_static('article_full_width_' . $result->nid, FALSE);
        $is_full_width = TRUE;
      }
    }
  }

  if ($view->id() === "search") {
    $variables["searchInputValue"] = $view->exposed_raw_input['query'];
    $variables["searchResultCount"] = $view->total_rows;
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * {@inheritDoc}
 */
function suomidigi_views_pre_render(ViewExecutable &$view) {
  if ($view->id() === "taxonomy_term") {
    $term = Term::load((int) $view->args[0]);

    if ($term->bundle() === "tags") {
      // Sort view listing according to published time
      // if node is sticky on top of lists -> is not going to stick.
      usort($view->result, function ($a, $b) {
        return $b->node_field_data_published_at - $a->node_field_data_published_at;
      });
    }

    // Replace taxonomy term view title to correspond taxonomy term plural
    // name, if one exists. Otherwise use taxonomy term name.
    if ($term->hasField('field_plural_name')) {
      $translated_title = Drupal::service('entity.repository')->getTranslationFromContext($term)->field_plural_name->value;

      if (!empty($translated_title)) {
        $view->setTitle($translated_title);
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_media(&$variables) {
  $media = $variables['media'];

  switch ($media->bundle()) {
    case 'attachment':
      if ($media->hasField('field_media_file')) {
        /** @var \Drupal\file\Entity\File $file */
        $file = $media->get('field_media_file')->entity;
        $path = $file->getFileUri();

        if ($path) {
          $variables['file_extension'] = pathinfo($path, PATHINFO_EXTENSION);
          $variables['file_size'] = format_size($file->getSize());
          $variables['file_url'] = $path;
        }
      }
      break;

    case 'attachment_external':
      $file_data = $media->getSource()->getFileMetadata($media);
      if (is_array($file_data) && !empty($file_data)) {
        $variables['file_size'] = format_size($file_data['file_size']);
        $variables['file_extension'] = $file_data['file_type'];
        $variables['file_url'] = $file_data['file_url'];
      }
      break;

    default:
      return;
  }
}

/**
 * Implements hook_form_alter().
 */
function suomidigi_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (
    $form_id === 'views_exposed_form' &&
    $form['#id'] === 'views-exposed-form-search-search-api-view'
  ) {
    $form['#id'] = 'search_form';
    $form['query']['#attributes']['placeholder'] = t('Search');
    $form['query']['#attributes']['id'] = 'search';
    $form['query']['#attributes']['class'][] = 'search-form__input';
    $form['#attributes']['class'][] = 'search-form';
    $form['actions']['submit']['#attributes']['data-twig-suggestion'] = 'search_form_submit';
    $form['actions']['submit']['#attributes']['class'][] = 'search-form__button';
    // Remove form-item wrapper from input and button.
    $form['query']['#theme_wrappers'] = [];
    $form['actions']['#theme_wrappers'] = [];
  }
}

/**
 * Implements hook_theme_suggestions_input_alter().
 */
function suomidigi_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = 'input__' . $element['#type'] . '__' . $element['#attributes']['data-twig-suggestion'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_pager(&$variables) {
  // Cast current to be INT instead of FLOAT.
  $variables['current'] = isset($variables['current']) ? (int) $variables['current'] : 1;

  // Check for last pager item href link.
  if (!empty($variables['items']['last']['href'])) {
    $splittedLink = explode("page=", $variables['items']['last']['href'])[1];
    $variables['pagesTotalAmount'] = (int) $splittedLink + 1;
  }
  else {
    if (!empty($variables['items']['pages'])) {
      $lastArrayItem = end($variables['items']['pages'])['href'];
      $splittedLink = explode("page=", $lastArrayItem)[1];
      $variables['pagesTotalAmount'] = (int) $splittedLink + 1;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_input__textfield(&$variables) {
  if ($variables['attributes']['id'] == 'search') {
    $variables['attributes']['aria-label'] = t('Search');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_community(&$variables) {

  // Get community domain values and set them as variables for the template.
  $community = $variables['elements']['#community'];
  if (
    $community instanceof Community &&
    $community->hasField('field_community_domain')
  ) {
    $current_language = Drupal::languageManager()->getCurrentLanguage()->getId();
    $community_domain_id = $community->field_community_domain->target_id;

    $domain = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->load($community_domain_id);

    if ($domain->hasTranslation($current_language)) {
      $domain = $domain->getTranslation($current_language);
    }

    if ($domain->hasField('field_community_domain_logo')) {
      $image_target = $domain->get('field_community_domain_logo')->first();

      if (!empty($image_target)) {
        $image_id = $image_target->get('target_id')->getValue();
        $variables['community_domain_logo'] = $image_id;
      }
    }

    $variables['community_domain_label'] = $domain->label();
    $variables['community_domain_domain'] = $domain->field_community_domain_domain->value;
  }
}
